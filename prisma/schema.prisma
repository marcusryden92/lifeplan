// prisma/schema.prisma

// --- Datasource and Generator Configuration ---
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

// --- Authentication Models ---

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?              @map("email_verified")
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  SimpleEvent           SimpleEvent[]
  Planner               Planner[]
  EventTemplate         EventTemplate[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String // Fixed typo here

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

// --- Calendar Models ---

enum WeekDayType {
  sunday // index 0
  monday // index 1
  tuesday // index 2
  wednesday // index 3
  thursday // index 4
  friday // index 5
  saturday // index 6
}

// CalendarEvent model with relation to User and embedded RRule
model SimpleEvent {
  id       String   @id @default(cuid())
  title    String
  start    DateTime
  end      DateTime
  duration Int?
  userId   String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  rrule String?

  isTemplateItem  Boolean
  backgroundColor String
  borderColor     String

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@map("SimpleEvents")
}

enum PlanType {
  task
  plan
  goal
}

// Planner model for tracking tasks, plans, and goals
model Planner {
  id                 String    @id @default(uuid())
  title              String
  parentId           String?
  type               PlanType?
  isReady            Boolean?
  duration           Int?
  deadline           DateTime?
  starts             DateTime?
  dependency         String?
  completedStartTime DateTime?
  completedEndTime   DateTime?
  color              String?

  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@map("Planners")
}

// --- EventTemplate Model ---
model EventTemplate {
  id        String      @id @default(cuid())
  title     String
  startDay  WeekDayType // Weekday name
  startTime String // Time in "HH:mm" format
  duration  Int // Duration in minutes
  createdAt DateTime?   @default(now())
  updatedAt DateTime?   @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("EventTemplates")
}
